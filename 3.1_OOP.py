# Это методология программирования основанная на представлении программы
# в виде совокупности объектов, каждый из которых, является экземпляром опред класса,
# а классы образуют иерархию наследования
# класс в ООП выступает в роли чертежа для объекта,
# т е класс - это инструкция по созданию объекта
#
# class Person(): # Создали класс Person (всегда с большой буквы), чтобы в последствии создавать новых людей с пом этого класса
#     """"Модель человека""" # это коммент к коду, хороший стиль, ставим 3 раза двойные кавычки
#     def __init__(self, name, age ): # тут мы создаём метод(ф-ю класса),с помощью метода __init__ создаётся список обязательных параметров (атрибутов класса - это name и age)
#         для нашего экземпляра класса и последующих экземпляров
#         т е у нового экземпляра класса, нового человека, будет 2 обяз параметра name и age
#         """"Инициализация атрибутов человека - имя, возраст"""
#         self.name = name # self - это ссылка на экземпляр класса. Мы говорим, что это имя класса person,
#         # и этот возраст класса person - это ссылка для того, чтобы программа понимала к чему мы обращаемся.
#         self.age = age # когда мы создадим нового человека (экземпляр класса person),
#         # система обратится к методу __init__ и будет искать обязательные пар-ры нашего экземпляра name и age
#         print('Человек создан')
#
#     # теперь создадим 2 метода, кот будут показывать то, что способен делать наш человек, т е функционал класса person
#     def sing(self): # укажем что чел может петь. сис-ма сама ставит self, т к это ссылка на наш экземпляр класса, потому что он нах-ся в теле класса
#         """"Просим человека спеть"""
#         print(self.name + ' поёт') # self.name - ссылаемся на имя экземпляра класса с конкотинацией
#         # когда мы каждый раз, вызывая у экземпляра класса метод sing, система будет выводить имя нового экземпляра класса и строку " поёт"
#
#     def dance(self):  # чел еще и умеет танцевать
#         """"Просим человека станцевать"""
#         print(self.name + ' танцует')
#     в двух выщеуказанных методах, dance и sing, есть ссылка на наш класс и его обязательные атрибуты
#
# создадим объект(экземпляр) нашего класса(он создаётся не в теле класса)
# man = Person("Igor", 30) # в переменной man обратились к классу Person с указанием его обязательных атрибутов, если бы не создали man с обращением к Person, то система ничего не ответила бы
# Система нам отвечает "Человек создан", т к в данном случае мы создали экземпляр класса person
# можно и 2ой экземпляр класса создать, тогда система выведет его два раза, т к будет 2 экземпляра класса
#
# попросим систему вывести имя нашего экземпляра класса:
# print(man.name) # в скобках пишем имя экземпляра класса через точку, и дальше система будет подсказывать
# какие обязательные атрибуты вводить name или age
# теперь в переменной man хранится экземпляр класса person и мы указываем значения наших атрибутов, которые будем получать (строка 31)
# т о в перем man хранится экземпляр класса person, который умеет петь, танцевать и имеет обязательные атрибуты

# 1 попросим Игоря станцевать
# man.dance() # система выдаёт -
# Человек создан
# Igor танцует
# также можно попросить и спеть

# 2 создадим к мужчине еще и женщину
# class Person():
#     """"Модель человека"""
#     def __init__(self, name, age):
#         """"Инициализация атрибутов человека - имя, возраст"""
#         self.name = name
#         self.age = age
#         print('Человек создан')
#
    # def sing(self):
    #     """"Просим человека спеть"""
    #     print(self.name + ' поёт')
#
#     def dance(self):  #
#         """"Просим человека станцевать"""
#         print(self.name + ' танцует')
#
# man = Person("Igor", 30)
# woman = Person("Lena", 31) # создаем переменную woman для этого, и внутри класса person указываем обяз атрибуты
# # попросим Игоря и Лену станцевать вместе
# man.dance()
# woman.dance()
# на выходе при этом "Человек создан" - 2 раза (т к у нас 2 экземпляра класса), а также "Igor танцует" и "Lena танцует"
# можно менять методы, к примеру чтоб Игорь пел, а Лена танцевала

# class Animals():
#     def __init__(self, animal_name):
#         self.animal_name = animal_name
#         print("животное создано")
#
#     def eatherbs(self):
#         print(self.animal_name + " ест траву")
#
#     def eatanimals(self):
#         print(self.animal_name + " ест животных")
#
#     def eatinsects(self):
#         print(self.animal_name + " ест насекомых")
#
# animalherbs = Animals("Корова")
# animalanimal = Animals("Лев")
# animalherbs.eatherbs()
# animalanimal.eatanimals()

# 1. Создаём класс
# 2. Создаем метод с указанием обязательных атрибутов
# 3. Создаём функции, которые будет делать класс
# 4. Создаём экземпляр класса
# 5. Вызываем функции нашего класса


# class Soda():
#     def __init__(self, supplement):
#         self.supplement = supplement
#
#     def show_my_drink(self):
#         if self.supplement == "лимонад":
#             print("Газировка и " + self.supplement)
#         else:
#             print("Обычная газировка")
#
# baverage = Soda(str(input("Введите вашу добавку к газировке: ")))
# код читается пайчармом сначала экз класса, там мы указываем обяз атрибуты.
# система идет наверх в ф-цию инициализации атрибутов экземпляра класса
# а затем, если мы обратились к к-л функции/методу класса, идет его выполнять,
# используя эти атрибуты
# baverage.show_my_drink()

# создам коктейли
class Coctail():
    def __init__(self, ingridient_1, ingridient_2):
        self.ingridient_1 = ingridient_1
        self.ingridient_2 = ingridient_2
        print("Коктейль создан")

    def alcohol_beverage(self):
        if self.ingridient_1 == "томатный сок" and self.ingridient_2 == "водка":
            print(f'Кровавая Мэри')
        elif self.ingridient_1 == "джин" and self.ingridient_2 == "тоник":
            print(f'Джин-тоник')
        elif self.ingridient_1 == "ром" and self.ingridient_2 == "кола":
            print(f'B52')
        else:
            print("Какой-то левак")


tomato_juice = Coctail(str(input("Введите название 1го ингридиента: ")), str(input("Введите название 2го ингридиента: ")))

tomato_juice.alcohol_beverage()