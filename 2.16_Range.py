# Используется гораздо реже, чем for
# Он выполняет блок кода, пока логическое выражение равно истине (т е true)
# важно!!!т к он выполняется пока выр-е равно true, то он может быть бесконечным (может сильно грузануть оперативу)
# поэтому, большиство разрабов и автотестеров чаще используют цикл for

#1
# a = 10
# while a > 1:
#     print(a) #цикл идет по кругу бесконечно, т к цикл истинный, 10 всегда больше, чем 1.

#1.1 меняем знак в другую сторону, то код не выполнится

# a = 10
# while a < 1:
#     print(a) #цикл никогда не выполнится т к утв-ние 10 < 1 - ложно(false)

#2. Можно задать условие, чтобы цикл не был бесконечным
# a = 10
# while a > 1:
#     a = a-1 # с каждой новой итерацией a будет уменьшаться на 1, и в итоге условие цикл не выполнится, что остановит его
#     print(a) #послядняя будет 1 (a > 1)

#2.1
# a = 10
# while a >= 1:
#     a = a-1 # с каждой новой итерацией a будет уменьшаться на 1, и в итоге условие цикл не выполнится, что остановит его
#     print(a) #послядняя будет 0 (a >= 1)

# 2.2 сокращения для вычета единицы (тоже самое, что и a = a-1)
# a = 10
# while a > 1:
#     a -= 1 # "-=" тоже самое, что и a-1; - перед равно значит что мы с каждй последнующей итерацией будем вычитать 1
#     print(a)

# 3. Отличие while от for
# a=10
# b=[1, 2, 3, 4, 5]
# с = print(len(b))
# while a >= 1:
#     a = a-1
#     print(a)

# при исп-нии while надо было бы  сначала измерить длину списка через len
# потом поместить это значение в переменную и только потом запустить цикл while этой переменной
# при цикле for мы используем список без доп действий
# поэтому цикл for хорош для группы элементов(список), а while для одного элемента.
# и есть риск, что while уйдет в бесконечность

# a = [10, 11]
# for f in a:
#     print(f)

x = 3
while x > 0:
    y = x
    while y > 0:
        y -= 1
        print(y)
    x -= 1
print('stop')
