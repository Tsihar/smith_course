#1 Создадим файл в кот будем работать с экземплярами класса Person
class Person():
    """"Создаём человека"""

    def __init__(self, name, age, height):
        """"Инициализируем атрибуты человека по умолчанию"""
        self.name = name
        self.age = age
        self.height = height
        self.weight = 82

    def description_person(self):
        """"Получение описания человека"""
        description = f'{self.name}. {self.age} лет. {self.height} см. {self.weight} кг.'
        print(f'Нового человека зовут: {description}')

    def get_weight(self):
        """"Получение веса человека"""
        w = f'{self.weight} кг'
        print(w)

    def update_weight(self, kg):  # задаем обяз атрибут метода update_weight, который заменит обяз атрибут всего класса
        """"Обновление веса человека"""
        self.weight = kg

# вставим класс потомок

# class Warrior(Person):
#     """"Создаём класс воина"""
#     def __init__(self, name, age, height):
#         """"Инициализируем атрибуты класса родителя"""
#         super().__init__(name, age, height)
#         self.rage = 100
#
#     def get_rage(self):
#         """"Получение заряда ярости воина"""
#         print("Заряд ярости равен: " + str(self.rage))
#
#     def description_person(self):
#         """"Переопределение метода родителя"""
#         description = f'{self.name}. {self.age} лет. {self.rage} ярости.' # осталось 2 старых атрибута и добавился один новый, кот есть только у класса-потомка
#     #     print(f'Нового воина зовут: {description}')
#         return description

#2 обратимся из другого модуля(3.5_man) к классу-родителю

#3 обратимся из другого модуля(potomok) к классу-потомку

#4 может быть 20-30 классов (в том числе чужие классы, кто-то другой их написал), и чтобы все их не перечислять делаем так

#5 Еще вариант импорта класса, хороший!!

#6 Можем хранить класс-потомок в отдельном модуле (родитель в одном модуле, а к прим, все потомки в другом)

# зачем отдельные файлы? это облегчает работу, мы делим всю иерархию на классы и подклассы
# и таким образом нам удобнее далее работать с классами в разных модулях проекта
# пример, как делят модули разрабы:

# Родит класс                                         Персонаж

# Подкласс                                  Раса                     Специальность

# Подкласс подкласса              люди  эльфы  гномы  орки         воин  маг  лучник